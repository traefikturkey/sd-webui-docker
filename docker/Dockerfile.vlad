# syntax=docker/dockerfile:1

ARG DEBIAN_FRONTEND=noninteractive
ARG DEBIAN_PRIORITY=critical
ARG PIP_PREFER_BINARY=1

FROM alpine/git:2.36.2 as download

# Get bash, set shell
RUN apk add --no-cache bash
SHELL [ "/bin/bash", "-ceuxo", "pipefail" ]

# Set working directory
WORKDIR /git

# Clone repositories
ARG STABLE_DIFFUSION_REPO=https://github.com/Stability-AI/stablediffusion.git
ARG STABLE_DIFFUSION_REF
RUN git clone --depth=1 "${STABLE_DIFFUSION_REPO}" "stablediffusion" \
  && cd "stablediffusion" \
  && git fetch --depth=1 origin "${STABLE_DIFFUSION_REF}" \
  && git reset --hard "${STABLE_DIFFUSION_REF}" \
  && git submodule update --init --recursive \
  && rm -fr assets data/**/*.png data/**/*.jpg data/**/*.gif

ARG TAMING_TRANSFORMERS_REPO=https://github.com/CompVis/taming-transformers.git
ARG TAMING_TRANSFORMERS_REF
RUN git clone --depth=1 "${TAMING_TRANSFORMERS_REPO}" "taming-transformers" \
  && cd "taming-transformers" \
  && git fetch --depth=1 origin "${TAMING_TRANSFORMERS_REF}" \
  && git reset --hard "${TAMING_TRANSFORMERS_REF}" \
  && git submodule update --init --recursive \
  && rm -fr data assets **/*.ipynb

ARG K_DIFFUSION_REPO=https://github.com/crowsonkb/k-diffusion.git
ARG K_DIFFUSION_REF
RUN git clone --depth=1 "${K_DIFFUSION_REPO}" "k-diffusion" \
  && cd "k-diffusion" \
  && git fetch --depth=1 origin "${K_DIFFUSION_REF}" \
  && git reset --hard "${K_DIFFUSION_REF}" \
  && git submodule update --init --recursive

ARG CODEFORMER_REPO=https://github.com/sczhou/CodeFormer.git
ARG CODEFORMER_REF
RUN git clone --depth=1 "${CODEFORMER_REPO}" "CodeFormer" \
  && cd "CodeFormer" \
  && git fetch --depth=1 origin "${CODEFORMER_REF}" \
  && git reset --hard "${CODEFORMER_REF}" \
  && git submodule update --init --recursive \
  && rm -fr data assets **/*.ipynb

ARG BLIP_REPO=https://github.com/salesforce/BLIP.git
ARG BLIP_REF
RUN git clone --depth=1 "${BLIP_REPO}" "BLIP" \
  && cd "BLIP" \
  && git fetch --depth=1 origin "${BLIP_REF}" \
  && git reset --hard "${BLIP_REF}" \
  && git submodule update --init --recursive

FROM base AS vlad

# set up some important environment variables
ARG DEBIAN_FRONTEND
ARG DEBIAN_PRIORITY
ARG PIP_PREFER_BINARY
ARG SD_WEBUI_VARIANT

ENV LC_ALL=C.UTF-8
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=utf-8
ENV SD_WEBUI_VARIANT=${SD_WEBUI_VARIANT}

# CUDA-related
ENV CUDA_MODULE_LOADING=LAZY
ENV SAFETENSORS_FAST_GPU=1
ENV TORCH_ALLOW_TF32_CUBLAS_OVERRIDE=1
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV NVIDIA_REQUIRE_CUDA="cuda>=11.6 driver>=450"

# Where we should put everything
ENV ROOT_DIR=/stable-diffusion-webui

# Clone actual repo
ARG SD_WEBUI_REF
ARG SD_WEBUI_REPO
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  git clone ${SD_WEBUI_REPO} ${ROOT_DIR} \
  && cd ${ROOT_DIR} \
  && git reset --hard ${SD_WEBUI_REF}

# Install xformers and triton
ARG XFORMERS_VERSION
ARG TRITON_VERSION
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install --no-deps --pre \
  xformers==${XFORMERS_VERSION} \
  triton==${TRITON_VERSION}

# Install requirements
ARG REQFILE_NAME
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  cd ${ROOT_DIR} \
  && pip install -r ${REQFILE_NAME}

# Grab repositories from download stage
COPY --from=download /git/ ${ROOT_DIR}/repositories/

# Install requirements for CodeFormer
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install -r ${ROOT_DIR}/repositories/CodeFormer/requirements.txt

# Install CLIP and pyngrok
ARG CLIP_PKG_REF
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install \
  pyngrok \
  "git+https://github.com/openai/CLIP.git@${CLIP_PKG_REF}"

# fix an issue in A1111
ENV LD_PRELOAD=libtcmalloc.so

# Reupdate the repo to target hash and install deps
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  cd ${ROOT_DIR} \
  && git fetch \
  && git reset --hard ${SD_WEBUI_REF} \
  && git submodule update --init --recursive \
  && pip install -r ${REQFILE_NAME}

# Install extra packages needed for extensions
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install \
    accelerate \
    diffusers \
    ffmpeg-python \
    imageio_ffmpeg \
    moviepy \
    natsort \
    onnxruntime-gpu \
    opencv-contrib-python-headless \
    scenedetect \
    scikit-learn \
    segment-anything \
    segmentation-refinement\
    tensorflow \
    invisible-watermark \
    onnxruntime \
    pi_heif

# Install moviepy and up-to-date tqdm
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install 'moviepy==1.0.3' 'tqdm>=4.65.0' 'imageio-ffmpeg'

# Add the rest of the files
COPY . /docker
COPY ./entrypoint_vlad.sh /docker/entrypoint.sh

# Run the vlad installer
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  cd ${ROOT_DIR} \
  && python -u installer.py

# Commit high treason
RUN sed -i 's/in_app_dir = .*/in_app_dir = True/g' /usr/local/lib/python3.10/site-packages/gradio/routes.py

# Set up the entrypoint
WORKDIR ${ROOT_DIR}
ENV CLI_ARGS=""
ENV DATA_DIR=/data
ENV MODEL_DIR=/models
ENV WEBUI_PORT=7860

EXPOSE ${WEBUI_PORT}
ENTRYPOINT [ "/docker/entrypoint.sh" ]
CMD python -u launch.py --listen --port ${WEBUI_PORT} ${CLI_ARGS}
